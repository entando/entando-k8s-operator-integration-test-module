<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.entando</groupId>
        <artifactId>entando-maven-root</artifactId>
        <version>7.2.0-ENG-4226-PR-18</version>
        <relativePath/>
    </parent>
    <groupId>org.entando</groupId>
    <artifactId>entando-k8s-operator</artifactId>
    <version>7.2.0-SNAPSHOT</version>
    <packaging>pom</packaging>

    <modules>
        <module>build-tool</module>
        <module>custom-model</module>
        <module>operator-common</module>
        <module>app-controller</module>
        <module>plugin-controller</module>
        <module>app-plugin-link-controller</module>
        <module>database-service-controller</module>
        <module>dbjob</module>
        <module>keycloak-controller</module>
        <module>controller-coordinator</module>
        <module>integration-e2e-tests</module>
    </modules>

    <name>Entando K8s Operator Parent POM</name>
    <description>Entando K8s Operator Quarkus based Parent POM</description>
    <inceptionYear>2019</inceptionYear>
    <url>https://central.entando.com</url>
    <licenses>
        <license>
            <name>GNU LESSER GENERAL PUBLIC LICENSE, Version 3, 29 June 2007</name>
            <url>https://www.gnu.org/licenses/lgpl-3.0.txt</url>
            <distribution>repo</distribution>
        </license>
    </licenses>
    <organization>
        <name>Entando Inc.</name>
        <url>http://www.entando.com/</url>
    </organization>
    <repositories>
        <repository>
            <id>nexus-jx</id>
            <url>https://nexus-jx.apps.serv.run/repository/maven-releases/</url>
            <releases>
                <enabled>true</enabled>
            </releases>
            <snapshots>
                <enabled>false</enabled>
            </snapshots>
        </repository>
    </repositories>
    <scm>
        <connection>scm:git:git@github.com:${github.organization}/entando-k8s-operator.git</connection>
        <developerConnection>scm:git:git@github.com:${github.organization}/entando-k8s-operator.git
        </developerConnection>
        <url>https://github.com/${github.organization}/entando-k8s-operator/</url>
        <tag>HEAD</tag>
    </scm>
    
    <properties>
        <skipLicenseDownload>true</skipLicenseDownload>
        <github.organization>entando-k8s</github.organization>
        <sonar.projectKey>${github.organization}_entando-k8s-operator</sonar.projectKey>
        <sonar.junit.reportPaths>target/surefire-reports</sonar.junit.reportPaths>
        <docker.skipimage>true</docker.skipimage>        
        <docker.organization>entando</docker.organization>
        <preDeploymentTestGroups></preDeploymentTestGroups>
        <postDeploymentTestGroups></postDeploymentTestGroups>
        <maven.compiler.source>11</maven.compiler.source>
        <maven.compiler.target>11</maven.compiler.target>
        <maven.javadoc.source>11</maven.javadoc.source>
        <entando.maven.repository.snapshot>
            https://nexus-jx.apps.serv.run/repository/maven-releases/
        </entando.maven.repository.snapshot>

        <!--dependencies -->
        <resteasy.version>3.15.1.Final</resteasy.version>
        <keycloak.version>15.1.1</keycloak.version>
        <quarkus.version>1.13.7.Final</quarkus.version>
        <jackson.version>2.12.6</jackson.version>
        <okhttp.version>3.12.1</okhttp.version>
        <jcabi.version>1.1</jcabi.version>
        <commons-lang.version>3.9</commons-lang.version>
        <fabric8.version>5.3.2</fabric8.version>
        <guava.version>30.1-jre</guava.version>
        <snakeyaml.version>1.27</snakeyaml.version>
        <slf4j.version>1.7.16</slf4j.version>
        <postgresql.driver.version>42.2.25</postgresql.driver.version>
        <ojdbc8.version>19.3.0.0</ojdbc8.version>
        <mysql-connector-java.version>8.0.28</mysql-connector-java.version>
        <annotations.version>17.0.0</annotations.version>
        <javax.servlet-api.version>3.0.1</javax.servlet-api.version>
        <commons-compress.version>1.21</commons-compress.version>
        <jaxp-ri.version>1.4</jaxp-ri.version>
        <protobuf-java.version>3.16.1</protobuf-java.version>
        <graal-sdk.version>21.3.1</graal-sdk.version>

        <!-- test dependencies -->
        <junit.version>5.7.0</junit.version>
        <mockito.version>2.23.0</mockito.version>
        <awaitility.version>4.0.1</awaitility.version>
        <hamcrest.version>2.1</hamcrest.version>
        <jaway.jsonpath.version>2.4.0</jaway.jsonpath.version>
        <jakarta.validation.api.version>2.0.2</jakarta.validation.api.version>
        <java-semver.version>0.9.0</java-semver.version>
        <httpclient.version>4.5.13</httpclient.version>
        <bcprov-jdk15on.version>1.68</bcprov-jdk15on.version>
        <commons-io.version>2.7</commons-io.version>
        <log4j.version>2.14.0</log4j.version>
        <aspectj.version>1.9.6</aspectj.version>
        <allure.version>2.14.0</allure.version>
        <jacoco-maven-plugin.version>0.8.7</jacoco-maven-plugin.version>
    </properties>
    <issueManagement>
        <system>Github</system>
        <url>https://github.com/${github.organization}/entando-k8s-operator/issues/</url>
    </issueManagement>
    <dependencyManagement>
        <dependencies>
            <!--Imports sequence matters-->
            <dependency>
                <groupId>com.fasterxml.jackson</groupId>
                <artifactId>jackson-bom</artifactId>
                <version>${jackson.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <dependency>
                <groupId>org.jboss.resteasy</groupId>
                <artifactId>resteasy-bom</artifactId>
                <version>${resteasy.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <dependency>
                <groupId>org.junit</groupId>
                <artifactId>junit-bom</artifactId>
                <version>${junit.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <dependency>
                <groupId>io.quarkus</groupId>
                <artifactId>quarkus-bom</artifactId>
                <version>${quarkus.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <dependency>
                <groupId>com.github.zafarkhaja</groupId>
                <artifactId>java-semver</artifactId>
                <version>${java-semver.version}</version>
            </dependency>

            <!--Transitive deps to override -->
            <dependency>
                <groupId>org.apache.commons</groupId>
                <artifactId>commons-compress</artifactId>
                <version>${commons-compress.version}</version>
            </dependency>
            <dependency>
                <groupId>org.apache.httpcomponents</groupId>
                <artifactId>httpclient</artifactId>
                <version>${httpclient.version}</version>
            </dependency>
            <dependency>
                <groupId>com.squareup.okhttp3</groupId>
                <artifactId>logging-interceptor</artifactId>
                <version>${okhttp.version}</version>
                <type>jar</type>
            </dependency>
            <dependency>
                <groupId>com.squareup.okhttp3</groupId>
                <artifactId>okhttp</artifactId>
                <version>${okhttp.version}</version>
                <type>jar</type>
            </dependency>
            <!--Imported dependencies to fix with exclusions -->
            <dependency>
                <groupId>org.jboss.resteasy</groupId>
                <artifactId>resteasy-jackson2-provider</artifactId>
                <version>${resteasy.version}</version>
                <exclusions>
                    <exclusion>
                        <groupId>jakarta.xml.bind</groupId>
                        <artifactId>jakarta.xml.bind-api</artifactId>
                    </exclusion>
                </exclusions>
            </dependency>
            <dependency>
                <groupId>org.jboss.resteasy</groupId>
                <artifactId>resteasy-jaxrs</artifactId>
                <version>${resteasy.version}</version>
                <exclusions>
                    <exclusion>
                        <groupId>org.jboss.spec.javax.annotation</groupId>
                        <artifactId>jboss-annotations-api_1.3_spec</artifactId>
                    </exclusion>
                    <exclusion>
                        <groupId>javax.activation</groupId>
                        <artifactId>activation</artifactId>
                    </exclusion>
                    <exclusion>
                        <groupId>javax.validation</groupId>
                        <artifactId>validation-api</artifactId>
                    </exclusion>
                </exclusions>
            </dependency>
            <dependency>
                <groupId>io.fabric8</groupId>
                <artifactId>kubernetes-client</artifactId>
                <version>${fabric8.version}</version>
                <exclusions>
                    <exclusion>
                        <groupId>jakarta.xml.bind</groupId>
                        <artifactId>jakarta.xml.bind-api</artifactId>
                    </exclusion>
                </exclusions>
            </dependency>

            <!-- typical dependencies -->
            <dependency>
                <groupId>com.sun.org.apache</groupId>
                <artifactId>jaxp-ri</artifactId>
                <version>${jaxp-ri.version}</version>
            </dependency>
            <dependency>
                <groupId>jakarta.validation</groupId>
                <artifactId>jakarta.validation-api</artifactId>
                <version>${jakarta.validation.api.version}</version>
            </dependency>
            <dependency>
                <groupId>org.postgresql</groupId>
                <artifactId>postgresql</artifactId>
                <version>${postgresql.driver.version}</version>
            </dependency>
            <dependency>
                <groupId>mysql</groupId>
                <artifactId>mysql-connector-java</artifactId>
                <version>${mysql-connector-java.version}</version>
            </dependency>
            <dependency>
                <groupId>com.oracle.ojdbc</groupId>
                <artifactId>ojdbc8</artifactId>
                <version>${ojdbc8.version}</version>
            </dependency>
            <dependency>
                <groupId>org.apache.commons</groupId>
                <artifactId>commons-lang3</artifactId>
                <version>${commons-lang.version}</version>
            </dependency>
            <dependency>
                <groupId>io.fabric8</groupId>
                <artifactId>openshift-client</artifactId>
                <version>${fabric8.version}</version>
            </dependency>
            <dependency>
                <groupId>io.quarkus</groupId>
                <artifactId>quarkus-arc</artifactId>
                <version>${quarkus.version}</version>
            </dependency>
            <dependency>
                <groupId>io.quarkus</groupId>
                <artifactId>quarkus-kubernetes-client</artifactId>
                <version>${quarkus.version}</version>
            </dependency>
            <dependency>
                <groupId>io.quarkus</groupId>
                <artifactId>quarkus-core</artifactId>
                <version>${quarkus.version}</version>
            </dependency>
            <dependency>
                <groupId>org.keycloak</groupId>
                <artifactId>keycloak-admin-client</artifactId>
                <version>${keycloak.version}</version>
                <exclusions>
                    <exclusion>
                        <groupId>org.keycloak</groupId>
                        <artifactId>keycloak-core</artifactId>
                    </exclusion>
                </exclusions>
            </dependency>
            <dependency>
                <groupId>org.keycloak</groupId>
                <artifactId>keycloak-core</artifactId>
                <version>${keycloak.version}</version>
            </dependency>
            <dependency>
                <groupId>org.slf4j</groupId>
                <artifactId>slf4j-api</artifactId>
                <version>${slf4j.version}</version>
            </dependency>
            <dependency>
                <groupId>org.yaml</groupId>
                <artifactId>snakeyaml</artifactId>
                <version>${snakeyaml.version}</version>
            </dependency>
            <dependency>
                <groupId>com.jcabi</groupId>
                <artifactId>jcabi-manifests</artifactId>
                <version>${jcabi.version}</version>
            </dependency>
            <dependency>
                <groupId>com.google.guava</groupId>
                <artifactId>guava</artifactId>
                <version>${guava.version}</version>
            </dependency>
            <dependency>
                <groupId>org.bouncycastle</groupId>
                <artifactId>bcprov-jdk15on</artifactId>
                <version>${bcprov-jdk15on.version}</version>
            </dependency>
            <dependency>
                <groupId>com.fasterxml.jackson.core</groupId>
                <artifactId>jackson-core</artifactId>
                <version>${jackson.version}</version>
            </dependency>
            <dependency>
                <groupId>com.fasterxml.jackson.core</groupId>
                <artifactId>jackson-databind</artifactId>
                <version>${jackson.version}</version>
            </dependency>
            <dependency>
                <groupId>com.google.protobuf</groupId>
                <artifactId>protobuf-java</artifactId>
                <version>${protobuf-java.version}</version>
            </dependency>
            <dependency>
                <groupId>org.graalvm.sdk</groupId>
                <artifactId>graal-sdk</artifactId>
                <version>${graal-sdk.version}</version>
            </dependency>
            
            <!-- Test-scoped dependencies. -->
            <dependency>
                <groupId>org.hamcrest</groupId>
                <artifactId>hamcrest</artifactId>
                <version>${hamcrest.version}</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>io.qameta.allure</groupId>
                <artifactId>allure-junit5</artifactId>
                <version>${allure.version}</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>com.fasterxml.jackson.dataformat</groupId>
                <artifactId>jackson-dataformat-yaml</artifactId>
                <version>${jackson.version}</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>org.awaitility</groupId>
                <artifactId>awaitility</artifactId>
                <version>${awaitility.version}</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>com.jayway.jsonpath</groupId>
                <artifactId>json-path</artifactId>
                <version>${jaway.jsonpath.version}</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>io.fabric8</groupId>
                <artifactId>kubernetes-server-mock</artifactId>
                <version>${fabric8.version}</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>org.mockito</groupId>
                <artifactId>mockito-junit-jupiter</artifactId>
                <version>${mockito.version}</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>commons-io</groupId>
                <artifactId>commons-io</artifactId>
                <version>${commons-io.version}</version>
            </dependency>
            <dependency>
                <groupId>org.apache.logging.log4j</groupId>
                <artifactId>log4j-slf4j-impl</artifactId>
                <version>${log4j.version}</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>org.apache.logging.log4j</groupId>
                <artifactId>log4j-jul</artifactId>
                <version>${log4j.version}</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>org.jetbrains</groupId>
                <artifactId>annotations</artifactId>
                <version>${annotations.version}</version>
            </dependency>
            <dependency>
                <groupId>javax.servlet</groupId>
                <artifactId>javax.servlet-api</artifactId>
                <version>${javax.servlet-api.version}</version>
            </dependency>
        </dependencies>
    </dependencyManagement>
    <build>
        <pluginManagement>
            <plugins>
                <plugin>
                    <artifactId>maven-surefire-plugin</artifactId>
                    <version>${maven-surefire-plugin.version}</version>
                    <configuration>
                        <skip>${skipPreDeploymentTests}</skip>
                        <forkCount>1</forkCount>
                        <testFailureIgnore>${ignoreAllFailures}</testFailureIgnore>
                        <groups>${preDeploymentTestGroups}</groups>
                        <classpathDependencyExcludes>
                            <classpathDependencyExclude>org.jboss.slf4j:slf4j-jboss-logmanager
                            </classpathDependencyExclude>
                        </classpathDependencyExcludes>
                        <argLine>${argLine} -Dfile.encoding=UTF-8
                            -javaagent:"${settings.localRepository}/org/aspectj/aspectjweaver/${aspectj.version}/aspectjweaver-${aspectj.version}.jar"
                        </argLine>
                        <systemPropertyVariables>
                            <allure.results.directory>${allure-maven.resultsDirectory}</allure.results.directory>
                            <junit.jupiter.extensions.autodetection.enabled>true
                            </junit.jupiter.extensions.autodetection.enabled>
                            <junit.jupiter.execution.parallel.enabled>true</junit.jupiter.execution.parallel.enabled>
                            <junit.jupiter.execution.parallel.config.strategy>dynamic
                            </junit.jupiter.execution.parallel.config.strategy>
                        </systemPropertyVariables>
                    </configuration>
                    <dependencies>
                        <dependency>
                            <groupId>org.aspectj</groupId>
                            <artifactId>aspectjweaver</artifactId>
                            <version>${aspectj.version}</version>
                        </dependency>
                    </dependencies>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-failsafe-plugin</artifactId>
                    <version>${maven-failsafe-plugin.version}</version>
                    <configuration>
                        <argLine>-Dfile.encoding=UTF-8
                            -javaagent:"${settings.localRepository}/org/aspectj/aspectjweaver/${aspectj.version}/aspectjweaver-${aspectj.version}.jar"
                        </argLine>
                        <testFailureIgnore>${ignoreAllFailures}</testFailureIgnore>
                        <skip>${skipPostDeploymentTests}</skip>
                        <groups>${postDeploymentTestGroups}</groups>
                        <includes>
                            <include>**/*Test.java</include>
                        </includes>
                        <systemPropertyVariables>
                            <allure.results.directory>${allure-maven.resultsDirectory}</allure.results.directory>
                            <junit.jupiter.extensions.autodetection.enabled>true
                            </junit.jupiter.extensions.autodetection.enabled>
                            <junit.jupiter.execution.parallel.enabled>true</junit.jupiter.execution.parallel.enabled>
                            <junit.jupiter.execution.parallel.config.strategy>dynamic
                            </junit.jupiter.execution.parallel.config.strategy>
                        </systemPropertyVariables>
                    </configuration>
                    <executions>
                        <execution>
                            <id>run-tests</id>
                            <goals>
                                <goal>integration-test</goal>
                                <goal>verify</goal>
                            </goals>
                        </execution>
                    </executions>
                    <dependencies>
                        <dependency>
                            <groupId>org.aspectj</groupId>
                            <artifactId>aspectjweaver</artifactId>
                            <version>${aspectj.version}</version>
                        </dependency>
                    </dependencies>
                </plugin>
                <plugin>
                    <groupId>org.jacoco</groupId>
                    <artifactId>jacoco-maven-plugin</artifactId>
                    <version>${jacoco-maven-plugin.version}</version>
                    <executions>
                        <execution>
                            <id>prepare-agent</id>
                            <goals>
                                <goal>prepare-agent</goal>
                            </goals>
                        </execution>
                        <execution>
                            <!--Bring it into core Maven build lifecycle for Sonar without needing the site phase-->
                            <id>report</id>
                            <goals>
                                <goal>report</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>
                <plugin>
                    <groupId>io.qameta.allure</groupId>
                    <artifactId>allure-maven</artifactId>
                    <version>2.10.0</version>
                    <configuration>
                        <reportVersion>${allure.version}</reportVersion>
                        <resultsDirectory>${allure-maven.resultsDirectory}</resultsDirectory>
                        <reportDirectory>${allure-maven.reportDirectory}</reportDirectory>
                    </configuration>
                    <executions>
                        <execution>
                            <goals>
                                <goal>report</goal>
                            </goals>
                            <phase>site</phase>
                        </execution>
                    </executions>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-javadoc-plugin</artifactId>
                    <version>${maven-javadoc-plugin.version}</version>
                    <configuration>
                        <skip>true</skip>
                        <doclint>none</doclint>
                        <source>11</source>
                        <detectJavaApiLink>false</detectJavaApiLink>
                        <quiet>true</quiet>
                    </configuration>
                    <executions>
                        <execution>
                            <id>attach-javadocs</id>
                            <goals>
                                <goal>jar</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>
                <plugin>
                    <groupId>io.github.phillipuniverse</groupId>
                    <artifactId>githook-maven-plugin</artifactId>
                    <version>1.0.5</version>
                    <configuration>
                        <hooks>
                            <pre-commit>
                                <![CDATA[
#!/bin/sh
echo "Validating..."
git fetch origin
if [ -n "$(git rev-list $(git branch --show-current)..origin/master)" ]; then
  echo "The local branch $(git branch --show-current) is not up to date."
  echo "Please run 'pull origin master' first."
  exit 1
fi
cd $(git rev-parse --show-toplevel)
MODEL_VERSION=$(curl -v -X GET "https://nexus-jx.apps.serv.run/service/rest/v1/search/assets/download?sort=version&repository=maven-releases&maven.groupId=org.entando&maven.artifactId=entando-k8s-custom-model" -H "accept: application/json" 2>&1 | awk -F "/" '/Location/ {print $9}')
COMMON_VERSION=$(curl -v -X GET "https://nexus-jx.apps.serv.run/service/rest/v1/search/assets/download?sort=version&repository=maven-releases&maven.groupId=org.entando&maven.artifactId=entando-k8s-operator-common" -H "accept: application/json" 2>&1 | awk -F "/" '/Location/ {print $9}')
sed -i "s:\(.*<entando-k8s-custom-model.version>\)\(.*\)\(</entando-k8s-custom-model.version>.*\):\1${MODEL_VERSION}\3:g" pom.xml
sed -i "s:\(.*<entando-k8s-operator-common.version>\)\(.*\)\(</entando-k8s-operator-common.version>.*\):\1${COMMON_VERSION}\3:g" pom.xml
git add pom.xml
mvn clean verify -DpreDeploymentTestGroups=in-process -Ppre-deployment-verification
                                ]]>
                            </pre-commit>
                        </hooks>
                    </configuration>
                    <executions>
                        <execution>
                            <goals>
                                <goal>install</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>

                <plugin>
                    <groupId>io.quarkus</groupId>
                    <artifactId>quarkus-maven-plugin</artifactId>
                    <version>${quarkus.version}</version>
                    <executions>
                        <execution>
                            <goals>
                                <goal>build</goal>
                            </goals>
                        </execution>
                    </executions>
                    <configuration>
                        <uberJar>false</uberJar>
                    </configuration>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-shade-plugin</artifactId>
                    <version>${maven-shade-plugin.version}</version>
                    <executions>
                        <execution>
                            <phase>package</phase>
                            <goals>
                                <goal>shade</goal>
                            </goals>
                            <configuration>
                                <createDependencyReducedPom>false</createDependencyReducedPom>
                                <transformers>
                                    <transformer
                                            implementation="org.apache.maven.plugins.shade.resource.ServicesResourceTransformer"/>
                                </transformers>
                                <filters>
                                    <filter>
                                        <artifact>io.fabric8:openshift-client</artifact>
                                        <excludes>
                                            <exclude>io/fabric8/kubernetes/client/Config*</exclude>
                                        </excludes>
                                    </filter>
                                </filters>
                            </configuration>
                        </execution>
                    </executions>
                </plugin>
            </plugins>
        </pluginManagement>

        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-deploy-plugin</artifactId>
                <version>2.8.2</version>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>3.0.0-M1</version>
            </plugin>
        </plugins>
    </build>

    <profiles>
        <profile>
            <!--
            This profile is typically executed right in the beginning of the pipeline. For instance, this is the first
            step that is executed to verify that the changes in the pull request comply to the coding standards in 
            Checkstyle, have test sufficient coverage from unit tests and integration tests and don't have any
            dependencies with known vulnerabilities. This profile is also responsible for static code analysis, but
            this is done directly against Sonar Cloud and the outcome of that process generally doesn't affect the build.

            Only tests that do NOT require the deployment artifact to have been deployed to Kubernetes should be
            executed here. Any other checks that can be done without needing to deploy the artifact should be done here.
            Keep in mind that the build environment should also guarantee that certain common services are available,
            such as Kubernetes itself and Keycloak.

             -->
            <id>pre-deployment-verification</id>
            <properties>
                <skipPreDeploymentTests>false</skipPreDeploymentTests>
                <allure-maven.resultsDirectory>${project.build.directory}/allure-results</allure-maven.resultsDirectory>
                <allure-maven.reportDirectory>${project.build.directory}/site/allure-reports</allure-maven.reportDirectory>
                <dependency-check.skip>true</dependency-check.skip>
            </properties>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.jacoco</groupId>
                        <artifactId>jacoco-maven-plugin</artifactId>
                    </plugin>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-surefire-plugin</artifactId>
                    </plugin>
                    <plugin>
                        <groupId>io.qameta.allure</groupId>
                        <artifactId>allure-maven</artifactId>
                    </plugin>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-compiler-plugin</artifactId>
                    </plugin>
                    <plugin>
                        <!--https://maven.apache.org/plugins/maven-checkstyle-plugin/examples/multi-module-config.html-->
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-checkstyle-plugin</artifactId>
                        <dependencies>
                            <dependency>
                                <groupId>${project.groupId}</groupId>
                                <artifactId>build-tool</artifactId>
                                <version>${project.version}</version>
                            </dependency>
                        </dependencies>
                        <configuration>
                            <configLocation>checkstyle.xml</configLocation>
                        </configuration>
                    </plugin>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-jar-plugin</artifactId>
                    </plugin>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-project-info-reports-plugin</artifactId>
                    </plugin>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-javadoc-plugin</artifactId>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
            <!--
            This profile is only executed once all Docker images have been built, and are ready for deployment
            to Kubernetes. The assumption here is that there will be some form of inter-process communication with
            the code that has been deployed to Kubernetes, exposed using Ingresses and/or Routes. Standard
            connectivity with Kubernetes will be provided by means of the entando.default.routing.suffix
            system property. No code coverage will be done here.
            -->
            <id>post-deployment-verification</id>
            <properties>
                <skipPostDeploymentTests>false</skipPostDeploymentTests>
                <allure-maven.resultsDirectory>${project.build.directory}/allure-smoke-results
                </allure-maven.resultsDirectory>
                <allure-maven.reportDirectory>${project.build.directory}/site/allure-smoke-reports
                </allure-maven.reportDirectory>
            </properties>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-failsafe-plugin</artifactId>
                    </plugin>
                    <plugin>
                        <groupId>io.qameta.allure</groupId>
                        <artifactId>allure-maven</artifactId>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
            <!--This profile uses Quarkus to place dependencies in target/lib. These can then
            be added to a Dockerfile if needed to ensure the application can run as expected.
            -->
            <id>jvm</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>io.quarkus</groupId>
                        <artifactId>quarkus-maven-plugin</artifactId>
                        <executions>
                            <execution>
                                <goals>
                                    <goal>build</goal>
                                </goals>
                                <configuration>
                                    <uberJar>false</uberJar>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
            <!--This profile uses License plugin to place LICENSES in target/generated-resources/licenses. 
            These can then be added to the Dockerfile (image directory /licenses).
            -->
            <id>license</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>license-maven-plugin</artifactId>
                        <configuration>
                            <executeOnlyOnRootModule>false</executeOnlyOnRootModule>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>
</project>

